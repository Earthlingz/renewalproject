R0 := closure(Function #0)
toInt := R0
R0 := closure(Function #1)
toStr := R0
R0 := closure(Function #2)
getTableSize := R0
return 


Function #0:
;
Name:            
Defined at line: 13
#Upvalues:       0
#Parameters:     1 (R0)
Is_vararg:       0
Max Stack Size:  2
;
Locals:
Start PC |  End PC  | Name
00000000 | 00000007 | value
;
No upvalues

R1 := nill
if R0 == R1 then PC := 6
  3 [14]: JMP       6
return R0
PC := 8
R1 := 0
return R1
return 


Function #1:
;
Name:            
Defined at line: 26
#Upvalues:       0
#Parameters:     1 (R0)
Is_vararg:       0
Max Stack Size:  2
;
Locals:
Start PC |  End PC  | Name
00000000 | 00000007 | value
;
No upvalues

R1 := nill
if R0 == R1 then PC := 6
  3 [27]: JMP       6
return R0
PC := 8
R1 := ""
return R1
return 


Function #2:
;
Name:            
Defined at line: 39
#Upvalues:       0
#Parameters:     1 (R0)
Is_vararg:       0
Max Stack Size:  9
;
Locals:
Start PC |  End PC  | Name
00000000 | 00000009 | t
00000001 | 00000009 | size
00000005 | 00000008 | (for generator)
00000005 | 00000008 | (for state)
00000005 | 00000008 | _
00000005 | 00000008 | _
;
No upvalues

R1 := 0
R2 := pairs
R3 := R0
R2,R3,R4,R5 := R2(R3)
end
R1 := R1 + 1
if R4 ~= nil then PC = 6
  8 [43]: JMP       6
return R1
return 
