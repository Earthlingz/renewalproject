; This file has been disassembled by the Lua 5 disassembler by Mike Lankamp
;
; Original file: emotionlist_f.lub
; File format:   Lua 5.0
; Disassembled:  Wed Mar 09 19:40:27 2011
;

; Name:            @emotionlist_f.lua
; Defined at line: 0
; #Upvalues:       0
; #Parameters:     0
; Is_vararg:       0
; Max Stack Size:  2
;
; No locals information
; No upvalues

  1 [ 27]: CLOSURE   R0 0         ; R0 := closure(Function #0)
  2 [ 16]: SETGLOBAL R0 K0        ; InsertEmotionListTable := R0
  3 [ 40]: CLOSURE   R0 1         ; R0 := closure(Function #1)
  4 [ 35]: SETGLOBAL R0 K1        ; InsertEmotionMsgListTable := R0
  5 [ 61]: CLOSURE   R0 2         ; R0 := closure(Function #2)
  6 [ 47]: SETGLOBAL R0 K2        ; GetEmotionMsg := R0
  7 [ 83]: CLOSURE   R0 3         ; R0 := closure(Function #3)
  8 [ 69]: SETGLOBAL R0 K3        ; GetEmotionActionByWndIdx := R0
  9 [ 99]: CLOSURE   R0 4         ; R0 := closure(Function #4)
 10 [ 91]: SETGLOBAL R0 K4        ; GetEmotionAction := R0
 11 [111]: CLOSURE   R0 5         ; R0 := closure(Function #5)
 12 [105]: SETGLOBAL R0 K5        ; ReqEmotionByIndex := R0
 13 [126]: CLOSURE   R0 6         ; R0 := closure(Function #6)
 14 [117]: SETGLOBAL R0 K6        ; ReqEmotionByMsgStr := R0
 15 [135]: CLOSURE   R0 7         ; R0 := closure(Function #7)
 16 [133]: SETGLOBAL R0 K7        ; GetEmotionOrderListSize := R0
 17 [135]: RETURN    R0 1         ; return 


; Function #0:
;
; Name:            
; Defined at line: 16
; #Upvalues:       0
; #Parameters:     3 (R0, R1, R2)
; Is_vararg:       0
; Max Stack Size:  5
;
; Locals:
; Start PC |  End PC  | Name
; 00000000 | 00000016 | emotionType
; 00000000 | 00000016 | MsgStrID
; 00000000 | 00000016 | actionNum
;
; No upvalues

  1 [17]: GETGLOBAL R3 K0        ; R3 := EmotionList
  2 [17]: NEWTABLE  R4 0 0       ; R4 := {}
  3 [17]: SETTABLE  R3 R0 R4     ; R3[R0] := R4
  4 [18]: GETGLOBAL R3 K0        ; R3 := EmotionList
  5 [18]: GETTABLE  R3 R3 R0     ; R3 := R3[R0]
  6 [18]: SETTABLE  R3 K1 R2     ; R3["actionNum"] := R2
  7 [20]: EQ        1 R1 K3      ; if R1 == -1 then PC := 23
  8 [20]: JMP       23
  9 [21]: GETGLOBAL R3 K5        ; R3 := c_GetMsgString
 10 [21]: MOVE      R4 R1        ; R4 := R1
 11 [21]: CALL      R3 2 2       ; R3 := R3(R4)
 12 [21]: SETGLOBAL R3 K4        ; msgStr := R3
 13 [23]: GETGLOBAL R3 K4        ; R3 := msgStr
 14 [23]: EQ        1 R3 K6      ; if R3 == nil then PC := 23
 15 [23]: JMP       23
 16 [23]: GETGLOBAL R3 K4        ; R3 := msgStr
 17 [23]: EQ        1 R3 K7      ; if R3 == "" then PC := 23
 18 [23]: JMP       23
 19 [24]: GETGLOBAL R3 K0        ; R3 := EmotionList
 20 [24]: GETTABLE  R3 R3 R0     ; R3 := R3[R0]
 21 [24]: GETGLOBAL R4 K4        ; R4 := msgStr
 22 [24]: SETTABLE  R3 K4 R4     ; R3["msgStr"] := R4
 23 [27]: RETURN    R0 1         ; return 


; Function #1:
;
; Name:            
; Defined at line: 35
; #Upvalues:       0
; #Parameters:     2 (R0, R1)
; Is_vararg:       0
; Max Stack Size:  4
;
; Locals:
; Start PC |  End PC  | Name
; 00000000 | 00000009 | emotionType
; 00000000 | 00000009 | MsgStr
;
; No upvalues

  1 [36]: EQ        1 R1 K0      ; if R1 == nil then PC := 10
  2 [36]: JMP       10
  3 [36]: EQ        1 R1 K1      ; if R1 == "" then PC := 10
  4 [36]: JMP       10
  5 [37]: GETGLOBAL R2 K2        ; R2 := EmotionMsgList
  6 [37]: NEWTABLE  R3 0 0       ; R3 := {}
  7 [37]: SETTABLE  R2 R1 R3     ; R2[R1] := R3
  8 [38]: GETGLOBAL R2 K2        ; R2 := EmotionMsgList
  9 [38]: SETTABLE  R2 R1 R0     ; R2[R1] := R0
 10 [40]: RETURN    R0 1         ; return 


; Function #2:
;
; Name:            
; Defined at line: 47
; #Upvalues:       0
; #Parameters:     1 (R0)
; Is_vararg:       0
; Max Stack Size:  4
;
; Locals:
; Start PC |  End PC  | Name
; 00000000 | 00000011 | index
; 00000003 | 00000011 | emotionType
; 00000008 | 0000000e | emotionMsg
;
; No upvalues

  1 [48]: GETGLOBAL R1 K0        ; R1 := EMOTION_ORDERLIST
  2 [48]: ADD       R2 R0 K1     ; R2 := R0 + 1
  3 [48]: GETTABLE  R1 R1 R2     ; R1 := R1[R2]
  4 [50]: EQ        1 R1 K2      ; if R1 == nil then PC := 16
  5 [50]: JMP       16
  6 [51]: GETGLOBAL R2 K3        ; R2 := EmotionList
  7 [51]: GETTABLE  R2 R2 R1     ; R2 := R2[R1]
  8 [51]: GETTABLE  R2 R2 K4     ; R2 := R2["msgStr"]
  9 [53]: EQ        1 R2 K2      ; if R2 == nil then PC := 13
 10 [53]: JMP       13
 11 [54]: RETURN    R2 2         ; return R2
 12 [54]: JMP       18           ; PC := 18
 13 [56]: LOADK     R3 K5        ; R3 := ""
 14 [56]: RETURN    R3 2         ; return R3
 15 [57]: JMP       18           ; PC := 18
 16 [59]: LOADK     R2 K5        ; R2 := ""
 17 [59]: RETURN    R2 2         ; return R2
 18 [61]: RETURN    R0 1         ; return 


; Function #3:
;
; Name:            
; Defined at line: 69
; #Upvalues:       0
; #Parameters:     1 (R0)
; Is_vararg:       0
; Max Stack Size:  4
;
; Locals:
; Start PC |  End PC  | Name
; 00000000 | 00000011 | index
; 00000003 | 00000011 | emotionType
; 00000008 | 0000000e | emotionAction
;
; No upvalues

  1 [70]: GETGLOBAL R1 K0        ; R1 := EMOTION_ORDERLIST
  2 [70]: ADD       R2 R0 K1     ; R2 := R0 + 1
  3 [70]: GETTABLE  R1 R1 R2     ; R1 := R1[R2]
  4 [72]: EQ        1 R1 K2      ; if R1 == nil then PC := 16
  5 [72]: JMP       16
  6 [73]: GETGLOBAL R2 K3        ; R2 := EmotionList
  7 [73]: GETTABLE  R2 R2 R1     ; R2 := R2[R1]
  8 [73]: GETTABLE  R2 R2 K4     ; R2 := R2["actionNum"]
  9 [75]: EQ        1 R2 K2      ; if R2 == nil then PC := 13
 10 [75]: JMP       13
 11 [76]: RETURN    R2 2         ; return R2
 12 [76]: JMP       18           ; PC := 18
 13 [78]: LOADK     R3 K5        ; R3 := -1
 14 [78]: RETURN    R3 2         ; return R3
 15 [79]: JMP       18           ; PC := 18
 16 [81]: LOADK     R2 K5        ; R2 := -1
 17 [81]: RETURN    R2 2         ; return R2
 18 [83]: RETURN    R0 1         ; return 


; Function #4:
;
; Name:            
; Defined at line: 91
; #Upvalues:       0
; #Parameters:     1 (R0)
; Is_vararg:       0
; Max Stack Size:  3
;
; Locals:
; Start PC |  End PC  | Name
; 00000000 | 00000009 | emotionType
; 00000003 | 00000009 | emotionAction
;
; No upvalues

  1 [92]: GETGLOBAL R1 K0        ; R1 := EmotionList
  2 [92]: GETTABLE  R1 R1 R0     ; R1 := R1[R0]
  3 [92]: GETTABLE  R1 R1 K1     ; R1 := R1["actionNum"]
  4 [94]: EQ        1 R1 K2      ; if R1 == nil then PC := 8
  5 [94]: JMP       8
  6 [95]: RETURN    R1 2         ; return R1
  7 [95]: JMP       10           ; PC := 10
  8 [97]: LOADK     R2 K4        ; R2 := -1
  9 [97]: RETURN    R2 2         ; return R2
 10 [99]: RETURN    R0 1         ; return 


; Function #5:
;
; Name:            
; Defined at line: 105
; #Upvalues:       0
; #Parameters:     1 (R0)
; Is_vararg:       0
; Max Stack Size:  4
;
; Locals:
; Start PC |  End PC  | Name
; 00000000 | 0000000a | index
; 00000003 | 0000000a | emotionType
;
; No upvalues

  1 [106]: GETGLOBAL R1 K0        ; R1 := EMOTION_ORDERLIST
  2 [106]: ADD       R2 R0 K1     ; R2 := R0 + 1
  3 [106]: GETTABLE  R1 R1 R2     ; R1 := R1[R2]
  4 [108]: EQ        1 R1 K2      ; if R1 == nil then PC := 11
  5 [108]: JMP       11
  6 [108]: LE        0 K3 R1      ; if 0 > R1 then PC := 11
  7 [108]: JMP       11
  8 [109]: GETGLOBAL R2 K4        ; R2 := c_ReqEmotion
  9 [109]: MOVE      R3 R1        ; R3 := R1
 10 [109]: CALL      R2 2 1       ; R2(R3)
 11 [111]: RETURN    R0 1         ; return 


; Function #6:
;
; Name:            
; Defined at line: 117
; #Upvalues:       0
; #Parameters:     1 (R0)
; Is_vararg:       0
; Max Stack Size:  4
;
; Locals:
; Start PC |  End PC  | Name
; 00000000 | 0000000d | msgStr
; 00000002 | 0000000d | emotionType
;
; No upvalues

  1 [118]: GETGLOBAL R1 K0        ; R1 := EmotionMsgList
  2 [118]: GETTABLE  R1 R1 R0     ; R1 := R1[R0]
  3 [120]: EQ        1 R1 K1      ; if R1 == nil then PC := 12
  4 [120]: JMP       12
  5 [120]: LE        0 K2 R1      ; if 0 > R1 then PC := 12
  6 [120]: JMP       12
  7 [121]: GETGLOBAL R2 K3        ; R2 := c_ReqEmotion
  8 [121]: MOVE      R3 R1        ; R3 := R1
  9 [121]: CALL      R2 2 1       ; R2(R3)
 10 [122]: RETURN    R1 2         ; return R1
 11 [122]: JMP       14           ; PC := 14
 12 [124]: LOADK     R2 K5        ; R2 := -1
 13 [124]: RETURN    R2 2         ; return R2
 14 [126]: RETURN    R0 1         ; return 


; Function #7:
;
; Name:            
; Defined at line: 133
; #Upvalues:       0
; #Parameters:     0
; Is_vararg:       0
; Max Stack Size:  2
;
; No locals information
; No upvalues

  1 [134]: GETGLOBAL R0 K0        ; R0 := getTableSize
  2 [134]: GETGLOBAL R1 K1        ; R1 := EMOTION_ORDERLIST
  3 [134]: TAILCALL  R0 2         ; return R0(R1)
  4 [134]: RETURN    R0 0         ; return R0,...
  5 [135]: RETURN    R0 1         ; return 
